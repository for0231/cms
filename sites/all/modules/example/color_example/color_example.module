<?php
/**
 * @file
 * An example filed using the Field API.
 *
 */
/**
 * Implements hook_field_info().
 * 
 * Provides the description of the field.
 */
function color_example_field_info() {
  return array(
    'color_example_rgb' => array(
      'label' => t('Example Color RGB'),
      'description' => t('Demonstrates a field composed of an RGB color.'),
      'default_widget' => 'color_example_text',
      'default_formatter' => 'color_example_simple_text',
    ),
  );
}
/**
 * Implements hook_field_schema().
*/
function color_example_field_schema($field) {
  $columns = array(
    'rgb' => array('type' => 'varchar', 'length' => 7, 'not null' => FALSE),
  );
  $indexes = array(
    'rgb' => array('rgb'),
  );
  return array(
    'columns' => $columns,
    'indexes' => $indexes,
  );
}

/**
 * Implements hook_field_validate()
 *
 * Verifies that the RGB field as combined is valid
 * (6 hex digits with a # at the beginning).
 */
function color_example_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['rgb'])) {
      if (! preg_match('@^#[0-9a-f]{6}$@', $item['rgb'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'color_example_invalid',
          'message' => t('Color must be in the HTML format #abcdef.'),
        );
      }
    }
  }
}
/**
 * Implements hook_field_is_empty().
 */
function color_example_field_is_empty($item, $field) {
  return empty($item['rgb']);
}

/**
 * Implements hook_field_formatter_info().
 */
function color_example_field_formatter_info() {
  return array(
    'color_example_simple_text' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('color_example_rgb'),
    ),
    'color_example_color_background' => array(
      'label' => t('Change the background of the output text'),
      'field types' => array('color_example_rgb'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function color_example_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'color_example_simple_text':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = '<p style="color: ' . $item['rgb'] . '">' . t('The color for this event is @code', array('@code' => $item['rgb'])) . '</p>';
      }
      break;
    case 'color_example_color_background':
      foreach ($items as $delta => $item) {
        drupal_add_css('div.region-content {background-color: ' . $item['rgb'] . ';}', array('type' => 'inline'));
        $element[$delta]['#markup'] = '<p>' . t('The color for this event has been changed to @code', array('@code' => $item['rgb'])) . '</p>';
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function color_example_field_widget_info() {
  return array(
    'color_example_text' => array(
      'label' => t('RGB value as #ffffff'),
      'field types' => array('color_example_rgb'),
    ),
    'color_example_3text' => array(
      'label' => t('RGB text fields'),
      'field types' => array('color_example_rgb'),
    ),
    'color_example_colorpicker' => array(
      'label' => t('Color Picker'),
      'field types' => array('color_example_rgb'),
    ),
  );
}
/**
 * Implements hook_field_widget_form().
 */
function color_example_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['rgb']) ? $items[$delta]['rgb'] : '';
  $element += array(
    '#delta' => $delta,
  );
  $element['rgb'] = array();
  
  switch ($instance['widget']['type']) {
    case 'color_example_colorpicker':
      $element['rgb'] += array(
        '#suffix' => '<div class="field-example-colorpicker"></div>',
        '#attributes' => array('class' => array('edit-field-example-colorpicker')),
        '#attached' => array(
          'library' => array(
            array('system', 'farbtastic'),
          ),
          'js' => array(drupal_get_path('module', 'color_example'). '/color_example.js'),
        ),
      );
    case 'color_example_text':
      $element['rgb'] += array(
        '#title' => t('Event\'s RGB Color'),
        '#type' => 'textfield',
        '#default_value' => $value,
        '#size' => 7,
        '#maxlength' => 7,
      );
      break;

    case 'color_example_3_text':
      if (isset($items[$delta]['rgb'])) {
        preg_match_all('@..@', substr($items[$delta]['rgb'], 1), $match);
      }
      else {
        $match = array(array());
      }

    $element += array(
      '#type' => 'fieldset',
      '#element_validate' => array('color_example_3text_validate'),
      '#delta' => $delta,
      '#attached' => array(
        'css' => array(drupal_get_path('module', 'color_example') . '/color_example.css'),
      ),
    );

    foreach (array('r' => t('Red'), 'g' => t('Green'), 'b'=> t('Blue')) as $key => $title) {
      $element[$key] = array(
        '#type' => 'textfield',
        '#title' => $title,
        '#size' => 2,
        '#default_value' => array_shift($mathch[0]),
        // '#description' => t(),
      );
    }
    break;
  }
  return $element;
}

/**
 * Validate the individual fields and then convert them into a single HTML RGB
 * value as text.
 */
function color_example_3text_validate($element, &$form_state) {
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta])) {
    $values = $form_state['values'][$field_name][$element['#language']][$delta];
    foreach (array('r','g','b') as $colorfield) {
      $val = hexdec($values[$colorfield]);
      if (strlen($values[$colorfield]) == 0) {
        form_set_value($element, array('rgb' => NULL), $form_state);
        return ;
      }
      if ((strlen($values[$colorfield]) != 2) || $val < 0 || $val > 255) {
        form_error($element[$colorfield], t("Saturation value must be a 2-digit hexadecimal value between 00 and ff."));
      }
    }
    
    $value = sprintf('#%02s%02s%02s', $values['r'], $values['g'], $values['b']);
    form_set_value($element, array('rgb' => $value), $form_state);
  }
}

/**
 * Implements hook_field_error().
 */
function color_example_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'color_example_invalid': 
      form_error($element, $error['message']);
      break;
  }
}
